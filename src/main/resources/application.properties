spring.application.name=telemetry-generator
server.port=8081

# Kafka configuration
spring.kafka.bootstrap-servers=${KAFKA_BROKER:localhost:29092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Default topic for telemetry data
telemetry.topic.name=telemetry-data

# Note: The consumer properties are also handled by the same bootstrap-servers property.
# The consumer group ID is configured but the topic listener is in the code.
spring.kafka.consumer.group-id=telemetry-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest

# --- PostgreSQL Configuration ---
# Use placeholders so it can be cleanly overridden by Docker Compose
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/telemetrydb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:telemetry}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:telemetry123}
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate Configuration ---
spring.jpa.hibernate.ddl-auto=update        
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
